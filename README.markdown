# Мультиагентная система для вычислений и веб-поиска

## Описание проекта

Проект представляет собой мультиагентную систему, реализованную в файле `agent.py`, предназначенную для решения задач, связанных с аналитическими и численными вычислениями, а также веб-поиском с семантическим ранжированием. Система поддерживает создание нескольких агентов, каждый из которых имеет доступ к набору инструментов для обработки запросов. В качестве демонстрации возможностей системы реализован пример с одним агентом, решающим задачу вычисления интеграла аналитически, численно и с поиском ответа в интернете. Проект использует контейнеризацию (Docker, Docker Compose), автоматизацию разработки (Gitpod) и непрерывную интеграцию (GitLab CI/CD) для обеспечения воспроизводимости и удобства работы.

## Мультиагентная архитектура

Мультиагентная система построена на основе модульной архитектуры, где каждый агент является экземпляром класса `BaseAgent`, определенного в `agent.py`. Агенты независимы, но имеют общий доступ к следующим инструментам и компонентам:

### Доступные инструменты

Каждый агент может использовать следующие инструменты для выполнения задач:
- **calculate**: Выполняет аналитические вычисления с использованием Wolfram Alpha (при наличии API-ключа) или библиотеки `sympy`. Подходит для решения математических выражений, таких как интегралы, производные и уравнения.
- **numerical**: Выполняет численные вычисления с использованием `sympy`. Используется для численного решения интегралов и других выражений, требующих приближенных значений.
- **web**: Выполняет расширенный веб-поиск через SerpApi с семантическим ранжированием результатов, используя модель `SentenceTransformer` для оценки релевантности.

### Общие компоненты
- **Логирование**: Класс `ExecutionLogger` сохраняет события (задачи, выбор инструментов, результаты) в базе данных SQLite (`agent_logs.db`) для последующего анализа.
- **Векторная память**: Класс `VectorMemory` хранит результаты в виде векторных представлений (с использованием `SentenceTransformer`) в базе данных SQLite (`memory.db`), позволяя агентам находить релевантные предыдущие результаты.
- **LLM-интеграция**: Класс `DeepSeekAgent` использует API DeepSeek для выбора подходящих инструментов и генерации ответов, если инструменты не требуются.
- **Кэширование**: Используется `TTLCache` для оптимизации производительности вычислений и поиска (кэш на 24 часа для инструментов, 1 час для LLM).

### Принципы работы
- Каждый агент принимает задачу, проверяет векторную память на наличие релевантных результатов.
- Если память не содержит подходящих ответов, агент использует LLM для выбора подходящих инструментов.
- Выбранные инструменты выполняются последовательно, результаты логируются и сохраняются в память.
- Ответы форматируются с тегом `<think>` для отделения рассуждений от итогового результата.

## Технологический стек

- **Язык программирования**: Python 3.11
- **Библиотеки**:
  - `requests`, `beautifulsoup4` — для HTTP-запросов и парсинга HTML.
  - `sentence-transformers`, `torch`, `transformers` — для семантического анализа текста.
  - `together` — для интеграции с API DeepSeek.
  - `cachetools` — для кэширования результатов.
  - `sympy`, `numpy` — для математических вычислений.
  - `python-dotenv` — для управления переменными окружения.
- **Базы данных**: SQLite для логирования и векторной памяти.
- **API**:
  - DeepSeek (LLM для выбора инструментов и генерации ответов).
  - Wolfram Alpha (аналитические вычисления).
  - SerpApi (веб-поиск).
- **Инфраструктура**:
  - Docker и Docker Compose для контейнеризации.
  - Gitpod для автоматизированной настройки среды разработки.
  - GitLab CI/CD для непрерывной интеграции и тестирования.

## Пример работы системы

В качестве репрезентативного примера в `agent.py` реализован один агент, решающий задачу: **"Рассчитай интеграл от sin(x) от 0 до π аналитически и численно, а также найди итоговый ответ в интернете"**. Этот пример демонстрирует возможности мультиагентной системы, включая выбор инструментов, выполнение задач и логирование.

### Код примера

```python
# Создание инструментов
tools = [
    Tool("calculate", calculate, "Аналитические вычисления с Wolfram Alpha или sympy", str),
    Tool("numerical", numerical_calc, "Численные вычисления с sympy", str),
    Tool("web", web_search, "Расширенный интернет-поиск с семантическим ранжированием", str)
]

# Инициализация агента
llm = DeepSeekAgent()
logger = ExecutionLogger()
agent = BaseAgent("Интеллектуальный Агент", llm, tools, logger)

# Выполнение задачи
task = "Рассчитай интеграл от sin(x) от 0 до pi аналитически и численно, а также найди итоговый ответ в интернете"
result = agent.solve_task(task)
print("Итоговый результат работы агента:")
print(result)
print("\nЛоги:")
print(logger.export_log())
```

### Ожидаемый результат
Агент выполнит задачу в три этапа:
1. **Аналитическое вычисление** (инструмент `calculate`): Использует Wolfram Alpha или `sympy` для вычисления интеграла `∫sin(x)dx` от 0 до π. Ожидаемый результат: `2`.
2. **Численное вычисление** (инструмент `numerical`): Выполняет численное интегрирование с помощью `sympy`. Ожидаемый результат: приближенное значение `2.0`.
3. **Веб-поиск** (инструмент `web`): Выполняет поиск через SerpApi, возвращая до трех наиболее релевантных результатов с заголовками, ссылками и отрывками текста.

**Пример вывода**:
```
Итоговый результат работы агента:
calculate: 2
numerical: 2.0
web: Лучшие результаты поиска:
  Title: Integral of sin(x) from 0 to π
  URL: https://example.com
  Схожесть: 0.95
  Отрывок: The integral of sin(x) from 0 to π equals 2...
  ...

Логи:
[
  {
    "timestamp": "2025-07-29T16:19:00",
    "session_id": "<uuid>",
    "agent": "Интеллектуальный Агент",
    "event": "TASK_RECEIVED",
    "thoughts": "",
    "details": "{\"task\": \"Рассчитай интеграл от sin(x) от 0 до pi аналитически и численно, а также найди итоговый ответ в интернете\"}"
  },
  ...
]
```

### Логирование
Все шаги (получение задачи, выбор инструментов, выполнение, результаты) логируются в `data/agent_logs.db`. Логи можно экспортировать для анализа.

## Установка и запуск

### Предварительные требования
- Установлены Docker и Docker Compose.
- Доступ к API-ключам для DeepSeek, Wolfram Alpha и SerpApi.
- Gitpod (опционально) для облачной разработки.
- GitLab для CI/CD (если используется).

### Шаги для локального запуска

1. **Клонируйте репозиторий**:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. **Настройте переменные окружения**:
   - Создайте файл `.env`:
     ```bash
     DEEPSEEK_API_KEY=<your-deepseek-api-key>
     WOLFRAM_APP_ID=<your-wolfram-app-id>
     SERPAPI_KEY=<your-serpapi-key>
     ```

3. **Запуск через Docker**:
   ```bash
   docker build -t intelligent-agent .
   docker run -v $(pwd)/data:/app/data --env-file .env intelligent-agent
   ```

4. **Запуск через Docker Compose**:
   ```bash
   docker-compose up
   ```

5. **Запуск в Gitpod**:
   - Откройте репозиторий в Gitpod.
   - Зависимости автоматически устанавливаются согласно `gitpod.yml`.
   - Запустите приложение:
     ```bash
     python agent.py
     ```

### Тестирование
- **Локальное тестирование**:
  ```bash
  pip install -r requirements.txt
  python -m unittest discover -s . -p "*_test.py"
  ```
- **CI/CD**: Тесты выполняются в GitLab CI для ветки `main`, с сохранением логов как артефакта (`data/agent_logs.db`).

## Структура проекта

- **`agent.py`**: Реализация мультиагентной системы, инструментов и примера с одним агентом.
- **`test_agent.py`**: Юнит-тесты для проверки логирования.
- **`requirements.txt`**: Список зависимостей.
- **`Dockerfile`**: Конфигурация Docker-образа.
- **`docker-compose.yml`**: Конфигурация для запуска с персистентным хранением.
- **`gitlab-ci.yml`**: Конфигурация CI/CD для сборки и тестирования.
- **`gitpod.yml`**: Настройка среды разработки в Gitpod.
- **`.env`**: Перемен